"When used with an array, the len function returns the length of the first axis:,this is used to find the length of the array"
"please take note, depending on the python ide you are using, you might have to use the print statement to get outputs,
"input"
a = np.array([[1, 2, 3], [4, 5, 6]], float)

"input"
len(a)

"output"
 2
 
 "The in statement can be used to test if values are present in an array:"
 "input"
  a = np.array([[1, 2, 3], [4, 5, 6]], float)
  2 in a
  
  "output"
  True
  
  "input"
   0 in a
   
   "output"
   False

  "Arrays can be reshaped using tuples that specify new dimensions. In the following example, we
turn a ten-element one-dimensional array into a two-dimensional one whose first axis has five
elements and whose second axis has two elements:"

"input"
 a = np.array(range(10), float)
  a
  array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
   a = a.reshape((5, 2))
    a
  "output"
  array([[ 0., 1.],
         [ 2., 3.],
         [ 4., 5.],
         [ 6., 7.],
         [ 8., 9.]])
         
  "so now, if we want to find out the current shape of a "
  
  "input"
   a.shape
   
   "output"
    (5, 2)

  "Notice that the reshape function creates a new array and does not itself modify the original
array. "

"Now lets attempt to change a particular value in an array, in this example the first value, i.e 1"

"input"
 a = np.array([1, 2, 3], float)
 a[0] = 0
  a
 "output"
 array([0., 2., 3.])
 
 
 "we can fill an array with a single value:"
 
 "input"
 a = array([1, 2, 3], float)
  a
  "output"
  array([ 1., 2., 3.])
  
  "input"
   a.fill(0)
   a
   "output"
   array([ 0., 0., 0.])
 

"Transposed versions of arrays can also be generated, which will create a new array with the
final two axes switched:"

"input"
 a = np.array(range(6), float).reshape((2, 3))
 a
 
 "output"
 array([[ 0., 1., 2.],
 [ 3., 4., 5.]])
 
 "input"
 a.transpose()
 
 "output"
 array([[ 0., 3.],
 [ 1., 4.],
 [ 2., 5.]])
 
 
 "One-dimensional versions of multi-dimensional arrays can be generated with flatten:"
 "input"
  a = np.array([[1, 2, 3], [4, 5, 6]], float)
   a
   
   "output"
   array([[ 1., 2., 3.],
         [ 4., 5., 6.]])
  
  "input"
  a.flatten()
  
  "output"
  array([ 1., 2., 3., 4., 5., 6.])
  
  
  "Two or more arrays can be concatenated together using the concatenate function with a
tuple of the arrays to be joined:"
"input"
a = np.array([1,2], float)
b = np.array([3,4,5,6], float)
c = np.array([7,8,9], float)
np.concatenate((a, b, c))
"output"
([1., 2., 3., 4., 5., 6., 7., 8., 9.])
 

"If an array has more than one dimension, it is possible to specify the axis along which multiple
arrays are concatenated. By default (without specifying the axis), NumPy concatenates along
the first dimension:"

"input"
 a = np.array([[1, 2], [3, 4]], float)
 b = np.array([[5, 6], [7,8]], float)
 np.concatenate((a,b))
 
 "output"
 ([[ 1., 2.],
 [ 3., 4.],
 [ 5., 6.],
 [ 7., 8.]])
