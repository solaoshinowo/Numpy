"""
Created on Sun Aug 11 02:56:19 2019

@author: sola
"""

import numpy as np

"Boolean comparisons can be used to compare members elementwise on arrays of equal size.
The return value is an array of Boolean True / False values:"

"input"
 a = np.array([1, 3, 0], float)
 b = np.array([0, 3, 2], float)
 a > b
 
 "output"
 ([ True, False, False], dtype=bool)
 
 "input"
  a == b
  
  "output"
  ([False, True, False], dtype=bool)
  
  
  "input"
  a <= b
  
  
  "output"
  
  ([False, True, True], dtype=bool)
  
  
  "The results of a Boolean comparison can be stored in an array:"
  "input"
  c = a > b
  c
  
  "output"
  ([ True, False, False], dtype=bool)
  
  
  "Arrays can be compared to single values using broadcasting:"
  
  "input"
  a = np.array([1, 3, 0], float)
  a > 2
  
  "output"
  ([False, True, False], dtype=bool)
  
  
  "The any and all operators can be used to determine whether or not any or all elements of a
Boolean array are true:"

"input"
c = np.array([ True, False, False], bool)
any(c)

"output"
True

"input"
all(c)

"output"
False


"Compound Boolean expressions can be applied to arrays on an element-by-element basis using
special functions logical_and, logical_or, and logical_not."

"input"
a = np.array([1, 3, 0], float)
np.logical_and(a > 0, a < 3)


"output"
([ True, False, False], dtype=bool)

"input"
 b = np.array([True, False, True], bool)
 np.logical_not(b)
 
 "output"
 ([False, True, False], dtype=bool)
 
 
 "input"
 c = np.array([False, True, False], bool)
 np.logical_or(b, c)
 
 "output"
 ([ True, True, False], dtype=bool)
 
 
 
 "The where function forms a new array from two arrays of equivalent size using a Boolean filter
to choose between elements of the two. Its basic syntax is where(boolarray,
truearray, falsearray):"

"input"
a = np.array([1, 3, 0], float)
np.where(a != 0, 1 / a, a)

"output"
([ 1. , 0.33333333, 0. ])

 


