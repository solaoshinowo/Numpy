"""
Created on Sun Aug 11 01:49:14 2019

@author: sola
"""

"Many functions exist for extracting whole-array properties. The items in an array can be
summed or multiplied:"

import numpy as np

"input"
a = np.array([2, 4, 3], float)
a.sum()

"output"
9.0

"input"
 a.prod()
 
 "output"
 24.0
 
 
 
 "For most of the routines described below, both standalone and member functions are available.
A number of routines enable computation of statistical quantities in array datasets, such as the
mean (average), variance, and standard deviation:"

"input"
a = np.array([2, 1, 9], float)
a.mean()

"output"
4.0

"input"
a.var()

"output"
12.666666666666666

"input"
a.std()

"output"
3.5590260840104371



"It's also possible to find the minimum and maximum element values:"

"input"
a = np.array([2, 1, 9], float)
a.min()
 
"output"
1.0

"input"
a.max()

"output"
9.0


"The argmin and argmax functions return the array indices of the minimum and maximum
values:"

"input"
 a = np.array([2, 1, 9], float)
 a.argmin()
 
 "output"
 1
 
 
 "input"
 a.argmax()
 
 "output"
 2
 
 
 "For multidimensional arrays, each of the functions thus far described can take an optional
argument axis that will perform an operation along only the specified axis, placing the results
in a return array:"

"input"
a = np.array([[0, 2], [3, -1], [3, 5]], float)
 a.mean(axis=0)
 
 "output"
 ([ 2., 2.])
 
 "input"
 
 a.mean(axis=1)
 
 "output"
 ([ 1., 1., 4.])
 
 "input"
 a.min(axis=1)
 
 "output"
 ([ 0., -1., 3.])
 
 "input"
 a.max(axis=0)
 
 "output"
 ([ 3., 5.])
 
 
 
 "Like lists, arrays can be sorted:"
 
 "input"
 a = np.array([6, 2, 5, -1, 0], float)
 sorted(a)
 
 "output"
 [-1.0, 0.0, 2.0, 5.0, 6.0]
 
 "input"
  a.sort()
   a
   
 "output"
 ([-1., 0., 2., 5., 6.])
 
 
 
 "Values in an array can be "clipped" to be within a prespecified range. This is the same as
applying min(max(x, minval), maxval) to each element x in an array."

"input"
 a = np.array([6, 2, 5, -1, 0], float)
 a.clip(0, 5)
 
 "output"
 ([ 5., 2., 5., 0., 0.])
 
 
 "Unique elements can be extracted from an array:"
 "input"
 a = np.array([1, 1, 4, 5, 5, 5, 7], float)
 np.unique(a)
 
 "output"
 ([ 1., 4., 5., 7.])
 
 
 "For two dimensional arrays, the diagonal can be extracted:"
 
 "input"
 a = np.array([[1, 2], [3, 4]], float)
 a.diagonal()
 
 "output"
 ([ 1., 4.])
